generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  name     String?
  image    String?
  role     Role    @default(USER)
  password String

  // email verification
  emailToken      String? @unique
  isEmailVerified Boolean @default(false)
  tokenExpiry     BigInt?

  // password reset
  passwordToken       String? @unique
  passwordTokenExpiry BigInt?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems       Problem[]
  submission     Submission[]
  solvedProblems problemSolved[]
  playlist       Playlist[]
}

model Problem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  userId             String
  examples           Json
  constraints        String
  hints              String?
  editorial          String?
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // relationships
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission       Submission[]
  solvedBy         problemSolved[]
  problemPlayLists ProblemInPlaylist[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // accepted or wrong answer
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation - problem, user, testCaseResult

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCase TestCaseResult[]
}

model TestCaseResult {
  id            String  @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation - submission
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model problemSolved {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problemId String
  // relation - problem, user

  problem Problem @relation(fields: [problemId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([userId, problemId])
}

model Playlist {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relation - problemInPlaylist, user

  problems ProblemInPlaylist[]
  user     User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model ProblemInPlaylist {
  id         String   @id @default(uuid())
  problemId  String
  playlistId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // relation - Playlist, Problem
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
}

model TokenBlackList {
  id        String   @id @default(uuid())
  token     String
  expiresAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
