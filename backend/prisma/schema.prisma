generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  image     String?
  role      Role     @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems       Problem[]
  submission     Submission[]
  solvedProblems problemSolved[]
  Playlist       Playlist[]
}

model Problem {
  id                Int        @id @default(autoincrement())
  title             String
  description       String
  difficulty        Difficulty
  tags              String[]
  userId            Int
  example           Json
  constraints       String
  hints             String?
  editorial         String?
  testcases         Json
  codeSnippets      Json
  referenceSolution Json
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // relationships
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission        Submission[]
  problemSolved     problemSolved[]
  ProblemInPlaylist ProblemInPlaylist[]
}

model Submission {
  id            Int     @id @default(autoincrement())
  userId        Int
  problemId     Int
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // accepted or wrong answer
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation - problem, user, testCaseResult

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCase TestCaseResult[]
}

model TestCaseResult {
  id            Int     @id @default(autoincrement())
  submissionId  Int
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation - submission
  submission Submission @relation(fields: [submissionId], references: [id])

  @@index([submissionId])
}

model problemSolved {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problemId Int

  // relation - problem, user

  problem Problem @relation(fields: [problemId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@index([userId, problemId])
}

model Playlist {
  id          Int      @id @default(autoincrement())
  userId      Int
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relation - problemInPlaylist, user

  problemInPlaylist ProblemInPlaylist[]
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProblemInPlaylist {
  id         Int      @id @default(autoincrement())
  problemId  Int
  playlistId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // relation - Playlist, Problem
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
}

model TokenBlackList {
  id        Int      @id @default(autoincrement())
  token     String
  expiresAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
